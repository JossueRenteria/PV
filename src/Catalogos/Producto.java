/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Catalogos;

import Utilerias.Conexion;
import Utilerias.Linea;
import Utilerias.Proveedor;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;

/**
 *
 * @author JossuéEslí
 */
public class Producto extends javax.swing.JFrame {
    public Conexion enlace;
    public Productos padre;
    private String accion;
    /**
     * Creates new form Linea
     */
    public Producto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        text_id = new javax.swing.JTextField();
        text_nombre = new javax.swing.JTextField();
        btn_aceptar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        text_codigo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        text_costo = new javax.swing.JTextField();
        text_venta = new javax.swing.JTextField();
        text_stock = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        combo_linea = new javax.swing.JComboBox(cargarLineas());
        combo_linea.setEditable(false);
        combo_proveedor = new javax.swing.JComboBox(cargarProveedor());
        combo_proveedor.setEditable(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("ID");

        jLabel2.setText("Nombre");

        btn_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/GuardarTodo.png"))); // NOI18N
        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("Codigo");

        text_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_codigoActionPerformed(evt);
            }
        });

        jLabel4.setText("Precio Costo");

        jLabel5.setText("Precio Venta");

        jLabel6.setText("Stock");

        jLabel7.setText("Linea");

        jLabel8.setText("Proveedor");

        combo_linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_lineaActionPerformed(evt);
            }
        });

        combo_proveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_proveedorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(text_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_id, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(text_nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(text_costo)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(18, 18, 18)
                            .addComponent(combo_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(text_stock, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                        .addComponent(text_venta)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(combo_linea, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(text_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(text_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(text_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(text_costo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(text_venta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(text_stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(combo_linea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(combo_proveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aceptar)
                    .addComponent(btn_cancelar))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-287)/2, (screenSize.height-434)/2, 287, 434);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        // salir del dialogo o frame:
        this.dispose();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        // Se invoca a establecer la edicion, insercin o eliminacion:
        if(accion.equals("EDITAR")){
            Editar();
        }
        if(accion.equals("ELIMINAR")){
            Eliminar();
        }
        if(accion.equals("INSERTAR")){
            Insertar();
        } 
    }//GEN-LAST:event_btn_aceptarActionPerformed

    private void combo_lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_lineaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_lineaActionPerformed

    private void combo_proveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_proveedorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_proveedorActionPerformed

    private void text_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_codigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_codigoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Linea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Linea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Linea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Linea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Producto().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JComboBox combo_linea;
    private javax.swing.JComboBox combo_proveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField text_codigo;
    private javax.swing.JTextField text_costo;
    private javax.swing.JTextField text_id;
    private javax.swing.JTextField text_nombre;
    private javax.swing.JTextField text_stock;
    private javax.swing.JTextField text_venta;
    // End of variables declaration//GEN-END:variables
    public void configurarPara(String accion){
        if(accion.equals("EDITAR")){
            this.accion = accion;
            habilitarCampos(true);
            text_codigo.requestFocus();
            text_id.setEditable(false);
        }
        if(accion.equals("ELIMINAR")){
            habilitarCampos(false);
            this.accion = accion;
            text_id.setEditable(false);
        }
        if(accion.equals("INSERTAR")){
            limpiarCapos();
            habilitarCampos(true);
            text_id.setEditable(false);
            text_codigo.requestFocus();
            this.accion = accion;
        }
     }  
    private void limpiarCapos() {
        
    }
    private void habilitarCampos(boolean estado){
        text_codigo.setEditable(estado);
        text_nombre.setEditable(estado);
        text_costo.setEditable(estado);
        text_venta.setEditable(estado);
        text_stock.setEditable(estado);
        combo_linea.setEditable(estado);
        combo_proveedor.setEditable(estado);
    }
    public void cargarCampos(String id){
        enlace.EjecutarSQL("SELECT * FROM Producto WHERE id="+id);
        try{
            enlace.datos.next();
            text_id.setText(enlace.datos.getString("id"));
            text_codigo.setText(enlace.datos.getString("codigo"));
            text_nombre.setText(enlace.datos.getString("nombre"));
            text_costo.setText(enlace.datos.getString("precio_costo"));
            text_venta.setText(enlace.datos.getString("precio_venta"));
            text_stock.setText(enlace.datos.getString("stock"));
            combo_linea.setSelectedItem(new Linea(enlace.datos.getInt("Linea_id"),
                                                  enlace.datos.getString("id")));
            //JOptionPane.showMessageDialog(null, "nombre");
            combo_proveedor.setSelectedItem(new Proveedor(enlace.datos.getInt("Proveedor_id"),
                                                          enlace.datos.getString("id")));
            //JOptionPane.showMessageDialog(null, "razon");
        }catch(SQLException Error){
            JOptionPane.showMessageDialog(null, Error.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);        
        }
    }
    private void Editar(){
        //Aqui vamos a mandar la informacion de la base de datos
        
        //Preparamos una sentencia de actualizacion
        String query = "UPDATE Producto SET codigo=?, "+
                       "nombre=?, "+
                       "precio_costo=?, "+
                       "precio_venta=?, "+
                       "stock=?, "+
                       "Linea_id=?, "+
                       "Proveedor_id=? "+
                       "WHERE id = "+text_id.getText();
        enlace.ordenEditar = null;
        //iniciamos la transaccion
        try{
            enlace.ordenEditar = enlace.conexion.prepareStatement(query);
            enlace.ordenEditar.setString(1, text_codigo.getText());
            enlace.ordenEditar.setString(2, text_nombre.getText());
            enlace.ordenEditar.setString(3, text_costo.getText());
            enlace.ordenEditar.setString(4, text_venta.getText());
            enlace.ordenEditar.setString(5, text_stock.getText());
            enlace.ordenEditar.setInt(6, ((Linea)combo_linea.getSelectedItem()).getId());
            enlace.ordenEditar.setInt(7, ((Proveedor)combo_proveedor.getSelectedItem()).getId());
            
            //escribir en la base de datos
            enlace.ordenEditar.executeUpdate();
            
            //Refrescar los datos y cerrar dialogo
            enlace.EjecutarSQL("SELECT * FROM Producto");
            padre.cargarTabla();
            this.dispose();
         
        }catch(SQLException Error){
            //si algo salio mal
            JOptionPane.showMessageDialog(this, Error.getMessage(),
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }         //aqui me quedé
    }
    private void Eliminar(){
        //Aqui vamos a confirmar la eliminacion
        int Respuesta = JOptionPane.showConfirmDialog(this,
                        "Realmente desea borrar el registro?",
                        "Confirmar Eliminacion", JOptionPane.YES_NO_OPTION);
        if(Respuesta == 1)
            return;
        
        String query = "DELETE FROM Producto "+
                       "WHERE id = ?";
        enlace.ordenEditar=null;
        //inicia la transaccion
        try{
            enlace.ordenEditar = enlace.conexion.prepareStatement(query);
            enlace.ordenEditar.setString(1, text_id.getText());
            enlace.ordenEditar.executeUpdate();
            //Se refresca los datos del JTable
            enlace.EjecutarSQL("SELECT * FROM Producto");
            padre.cargarTabla();
            this.dispose();
        }catch(SQLException Error){
            //si algo salio mal
            JOptionPane.showMessageDialog(this, Error.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);                   
        }    
    }
    private void Insertar(){
        //primero preparamos la sentencia de insercion
        String query = "INSERT INTO Producto (codigo, nombre, precio_costo, precio_venta, stock, Linea_id, Proveedor_id) "
                        +"VALUES(?, ?, ?, ?, ?, ?, ?)";
        //Validacion
        if(text_codigo.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Codigo");
                text_codigo.requestFocus();
                return;
            }
        if(text_nombre.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Nombre");
                text_nombre.requestFocus();
                return;
            }
        if(text_costo.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Costo");
                text_costo.requestFocus();
                return;
            }
        if(text_venta.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Venta");
                text_venta.requestFocus();
                return;
            }
        if(text_stock.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Stock");
                text_stock.requestFocus();
                return;
            }
          /*if(text_id_linea.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Id Linea");
                text_id_linea.requestFocus();
                return;
            }
            if(text_id_proveedor.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No se capturó el Id Proveedor");
                text_id_proveedor.requestFocus();
                return;
            }*/
        //Fin de validacion
        
        enlace.ordenEditar = null;
        
        //Iniciar la transaccion
        try{
            enlace.ordenEditar = enlace.conexion.prepareStatement(query);
            
            enlace.ordenEditar.setString(1, text_codigo.getText());
            enlace.ordenEditar.setString(2, text_nombre.getText());
            enlace.ordenEditar.setString(3, text_costo.getText());
            enlace.ordenEditar.setString(4, text_venta.getText());
            enlace.ordenEditar.setString(5, text_stock.getText());
            enlace.ordenEditar.setInt(6, ((Linea)combo_linea.getSelectedItem()).getId());
            enlace.ordenEditar.setInt(7, ((Proveedor)combo_proveedor.getSelectedItem()).getId());
                     
            enlace.ordenEditar.executeUpdate();
            //Refrescar los datos del JTable
            enlace.EjecutarSQL("SELECT * FROM Producto");
            padre.cargarTabla();
            this.dispose();
        }catch(SQLException Error){
            //si algo salio mal
            JOptionPane.showMessageDialog(this, Error.getMessage(),
                                           "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    private Vector cargarLineas(){
        Vector arreglo;
        arreglo = new Vector();
        
        Conexion conexionCombo = new Conexion();
        conexionCombo.Open();
        
        try{
          // combo_linea.removeAllItems();
           conexionCombo.EjecutarSQL("SELECT * FROM Linea "+
                                     "ORDER BY nombre");
           
           while(conexionCombo.datos.next()){
               arreglo.add(new Linea(conexionCombo.datos.getInt("id"),
                                     conexionCombo.datos.getString("nombre")));
           }
        }catch(SQLException Error){
            JOptionPane.showMessageDialog(this, Error.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        conexionCombo.Close();
        return(arreglo);
    }
     private Vector cargarProveedor(){
        Vector arreglo;
        arreglo = new Vector();
        
        Conexion conexionCombo = new Conexion();
        conexionCombo.Open();
        
        try{
          // combo_proveedor.removeAllItems();
           conexionCombo.EjecutarSQL("SELECT * FROM Proveedor "+
                                     "ORDER BY razon_social");
           
           while(conexionCombo.datos.next()){
               arreglo.add(new Proveedor(conexionCombo.datos.getInt("id"),
                                         conexionCombo.datos.getString("razon_social")));
           }
        }catch(SQLException Error){
            JOptionPane.showMessageDialog(this, Error.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        conexionCombo.Close();
        return(arreglo);
    }
}//fin de la clase